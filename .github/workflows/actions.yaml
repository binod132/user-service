name: CI/CD for Microservices

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  REGION: ${{ secrets.REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.SA }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
      
      # Install gke-gcloud-auth-plugin through gcloud
      - name: Install GKE gcloud Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud components update

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
              gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      # Build and push Order Service Docker image
      - name: Build and Push Order Service Docker image
        run: |  
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest .
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest

      # Pylint for Python Code Analysis
      - name: Run Pylint for Python code analysis
        run: |
          pip install pylint
          pylint app.py > pylint-output.txt || true

      # Check if the Pylint score is greater than 0.01
      - name: Check Pylint score
        run: |
          pylint_score=$(grep "rated at" pylint-output.txt | awk '{print $7}' | sed 's/\/10//')
          echo "Pylint score: $pylint_score"
          if (( $(echo "$pylint_score <= 0.01" | bc -l) )); then
            echo "Pylint score is too low. Failing the build."
            exit 1
          fi
          echo "Pylint score is acceptable. Passing the build."
      # Set up kubectl to interact with the GKE cluster
      - name: Set up kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID
          kubectl version --client

      # Apply Kubernetes manifests for User Service
      - name: Deploy User Service
        run: |
          kubectl apply -f k8s/user-service.yaml
      # Check User Service PODs
      - name: User Service pods
        run: |
          kubectl get pod | grep user

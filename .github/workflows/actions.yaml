name: CI/CD for Microservices

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  REGION: ${{ secrets.REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.SA }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
      
      # Install gke-gcloud-auth-plugin through gcloud
      - name: Install GKE gcloud Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud components update

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
              gcloud auth configure-docker $REGION-docker.pkg.dev --quiet
      # code analysis and vulnerability
      ## Application code analysis and vulnerability
      - name: Check Pylint score
        run: |
          pylint_score=$(grep "rated at" pylint-output.txt | awk '{print $7}' | sed 's/\/10//')
          echo "Pylint score: $pylint_score"
          if (( $(echo "$pylint_score <= 0.01" | bc -l) )); then
            echo "Pylint score is too low. Failing the build."
            exit 1
          fi
          echo "Pylint score is acceptable. Passing the build."

      # Build and push Order Service Docker image
      - name: Build and Push Order Service Docker image
        run: |  
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest .
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest
      
      # code analysis and vulnerability     
     # Run Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'us-west1-docker.pkg.dev/brave-smile-424210-m0/microservice/user-service:latest'
          format: 'table'
          exit-code: '0' # Set to 0 to allow subsequent steps
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Check vulnerability counts and fail if thresholds are exceeded
      - name: Check Trivy results
        run: |
          # Extract the number of vulnerabilities from the Trivy scan output
          TRIVY_OUTPUT=$(echo "${{ steps.trivy.outputs.vuln-report }}" | grep -A 5 "Total" | tail -n +2)
          HIGH_COUNT=$(echo "$TRIVY_OUTPUT" | grep -oP 'HIGH: \K[0-9]+')
          CRITICAL_COUNT=$(echo "$TRIVY_OUTPUT" | grep -oP 'CRITICAL: \K[0-9]+')

          # Set thresholds
          HIGH_THRESHOLD=10
          CRITICAL_THRESHOLD=10

          # Check counts against thresholds
          if [ "$HIGH_COUNT" -gt "$HIGH_THRESHOLD" ] || [ "$CRITICAL_COUNT" -gt "$CRITICAL_THRESHOLD" ]; then
            echo "Vulnerability threshold exceeded: HIGH: $HIGH_COUNT, CRITICAL: $CRITICAL_COUNT"
            exit 1  # Fail the step
          else
            echo "Vulnerability check passed: HIGH: $HIGH_COUNT, CRITICAL: $CRITICAL_COUNT"
          fi

      # # Scan the Docker image with Trivy
      # - name: Scan Docker image with Trivy
      #   run: |
      #     trivy image --exit-code 1 --severity HIGH,CRITICAL $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest || true

      # # Check the scan result and fail if critical vulnerabilities are found
      # - name: Check Trivy scan result
      #   run: |
      #     trivy image --quiet --exit-code 1 --severity HIGH,CRITICAL $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest
      #     if [ $? -ne 0 ]; then
      #       echo "Critical vulnerabilities found in Docker image. Failing the build."
      #       exit 1
      #     fi

      # Set up kubectl to interact with the GKE cluster
      - name: Set up kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID
          kubectl version --client

      # Apply Kubernetes manifests for User Service
      - name: Deploy User Service
        run: |
          kubectl apply -f k8s/user-service.yaml
      # Check User Service PODs
      - name: User Service pods
        run: |
          kubectl get pod | grep user

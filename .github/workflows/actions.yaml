name: CI/CD for Microservices

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  REGION: ${{ secrets.REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Initial Setup
      - name: Initial Setup
        run: |
          # Checkout code
          git clone https://github.com/${{ github.repository }} .
          
          # Authenticate with Google Cloud
          echo "${{ secrets.SA }}" > gcloud_credentials.json
          gcloud auth activate-service-account --key-file=gcloud_credentials.json
          gcloud config set project $PROJECT_ID
          gcloud components install gke-gcloud-auth-plugin
          gcloud components update
          
          # Docker Authentication
          gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      # Code Analysis
      - name: Code Analysis
        run: |
          # Run Pylint to check the code quality
          pylint_output=$(pylint .)  # Assuming pylint is installed and configured
          echo "$pylint_output" > pylint-output.txt

          # Extract Pylint score and check
          pylint_score=$(grep "rated at" pylint-output.txt | awk '{print $7}' | sed 's/\/10//')
          echo "Pylint score: $pylint_score"
          if (( $(echo "$pylint_score <= 0.01" | bc -l) )); then
            echo "Pylint score is too low. Failing the build."
            exit 1
          fi
          echo "Pylint score is acceptable. Passing the build."

      # Docker Build
      - name: Docker Build
        run: |
          # Build Docker image
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest .

      # Image Scan
      - name: Image Scan
        run: |
          # Run Trivy vulnerability scanner
          trivy image --exit-code 0 --ignore-unfixed --vuln-type os,library \
            --severity CRITICAL,HIGH --format table \
            -o test.txt $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest

          # Check vulnerability counts and fail if thresholds are exceeded
          TRIVY_OUTPUT=$(cat test.txt)
          HIGH_COUNT=$(echo "$TRIVY_OUTPUT" | grep -oP 'HIGH: \K[0-9]+')
          CRITICAL_COUNT=$(echo "$TRIVY_OUTPUT" | grep -oP 'CRITICAL: \K[0-9]+')
          HIGH_THRESHOLD=10
          CRITICAL_THRESHOLD=10

          if [ "$HIGH_COUNT" -gt "$HIGH_THRESHOLD" ] || [ "$CRITICAL_COUNT" -gt "$CRITICAL_THRESHOLD" ]; then
            echo "Vulnerability threshold exceeded: HIGH: $HIGH_COUNT, CRITICAL: $CRITICAL_COUNT"
            exit 1  # Fail the step
          else
            echo "Vulnerability check passed: HIGH: $HIGH_COUNT, CRITICAL: $CRITICAL_COUNT"
          fi

      # Docker Push
      - name: Docker Push
        run: |
          # Push Docker image
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/microservice/user-service:latest

      # Deployment
      - name: Deploy to GKE
        run: |
          # Set up kubectl
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

          # Deploy User Service
          kubectl apply -f k8s/user-service.yaml

          # Check User Service PODs
          kubectl get pod | grep user

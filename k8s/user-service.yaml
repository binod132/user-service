apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  labels:
    app: user-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: gpu
                operator: NotIn
                values:
                - "true"
      containers:
      - name: user-service
        image: us-west1-docker.pkg.dev/brave-smile-424210-m0/microservice/user-service:latest
        #image: 35.227.182.97:8082/user-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        resources:
          limits:
            memory: "256Mi"
            cpu: "100m"
          requests:
            memory: "128Mi"
            cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: user-service
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: prometheus-scaledobject
  namespace: default
spec:
  minReplicaCount: 3
  maxReplicaCount: 10
  scaleTargetRef:
    name: user-service
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://monitoring-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090 
      metricName: container_cpu_usage_seconds_total
      threshold: '20'
      query: sum(container_cpu_usage_seconds_total{pod=~"order-service-.*"})
---
# service-accounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-service-sa
  namespace: default

---
# rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: user-service-role
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-service-rolebinding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: user-service-sa
    namespace: default
roleRef:
  kind: Role
  name: user-service-role
  apiGroup: rbac.authorization.k8s.io

---
# Task 2.5 Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: public-ingress-prod
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: prod-test-ip-external
    #networking.gke.io/managed-certificates: "managed-certificate"
    networking.gke.io/v1beta1.FrontendConfig: "http-to-https"
    cloud.google.com/health-check-interval-sec: "60"
    cloud.google.com/health-check-timeout-sec: "30"

spec:
  # Add a default backend to catch all unmatched traffic
  defaultBackend:
    service:
      name: user-service
      port:
        number: 80
  rules:
  - host: frontend.khalti.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 80
      - path: /orders
        pathType: Prefix
        backend:
          service:
            name: order-service
            port:
              number: 5000

